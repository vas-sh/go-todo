// Code generated by MockGen. DO NOT EDIT.
// Source: core.go
//
// Generated by this command:
//
//	mockgen -source=core.go -destination=mocks/mocks.go -package mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	models "github.com/vas-sh/todo/internal/models"
	gomock "go.uber.org/mock/gomock"
)

// Mockrepoer is a mock of repoer interface.
type Mockrepoer struct {
	ctrl     *gomock.Controller
	recorder *MockrepoerMockRecorder
	isgomock struct{}
}

// MockrepoerMockRecorder is the mock recorder for Mockrepoer.
type MockrepoerMockRecorder struct {
	mock *Mockrepoer
}

// NewMockrepoer creates a new mock instance.
func NewMockrepoer(ctrl *gomock.Controller) *Mockrepoer {
	mock := &Mockrepoer{ctrl: ctrl}
	mock.recorder = &MockrepoerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Mockrepoer) EXPECT() *MockrepoerMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *Mockrepoer) Create(ctx context.Context, res *models.Task) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, res)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockrepoerMockRecorder) Create(ctx, res any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*Mockrepoer)(nil).Create), ctx, res)
}

// CreateFromDruft mocks base method.
func (m *Mockrepoer) CreateFromDruft(ctx context.Context, userID int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateFromDruft", ctx, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateFromDruft indicates an expected call of CreateFromDruft.
func (mr *MockrepoerMockRecorder) CreateFromDruft(ctx, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateFromDruft", reflect.TypeOf((*Mockrepoer)(nil).CreateFromDruft), ctx, userID)
}

// CreateTaskDruft mocks base method.
func (m *Mockrepoer) CreateTaskDruft(ctx context.Context, body models.TaskDruft) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTaskDruft", ctx, body)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateTaskDruft indicates an expected call of CreateTaskDruft.
func (mr *MockrepoerMockRecorder) CreateTaskDruft(ctx, body any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTaskDruft", reflect.TypeOf((*Mockrepoer)(nil).CreateTaskDruft), ctx, body)
}

// DeleteTaskDruft mocks base method.
func (m *Mockrepoer) DeleteTaskDruft(ctx context.Context, userID int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTaskDruft", ctx, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteTaskDruft indicates an expected call of DeleteTaskDruft.
func (mr *MockrepoerMockRecorder) DeleteTaskDruft(ctx, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTaskDruft", reflect.TypeOf((*Mockrepoer)(nil).DeleteTaskDruft), ctx, userID)
}

// FindTaskDruft mocks base method.
func (m *Mockrepoer) FindTaskDruft(ctx context.Context, userID int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindTaskDruft", ctx, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// FindTaskDruft indicates an expected call of FindTaskDruft.
func (mr *MockrepoerMockRecorder) FindTaskDruft(ctx, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindTaskDruft", reflect.TypeOf((*Mockrepoer)(nil).FindTaskDruft), ctx, userID)
}

// GetTask mocks base method.
func (m *Mockrepoer) GetTask(ctx context.Context, userID, offset int64) (models.Task, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTask", ctx, userID, offset)
	ret0, _ := ret[0].(models.Task)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetTask indicates an expected call of GetTask.
func (mr *MockrepoerMockRecorder) GetTask(ctx, userID, offset any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTask", reflect.TypeOf((*Mockrepoer)(nil).GetTask), ctx, userID, offset)
}

// GetTaskDruftStatus mocks base method.
func (m *Mockrepoer) GetTaskDruftStatus(ctx context.Context, userID int64) (models.UserStatus, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTaskDruftStatus", ctx, userID)
	ret0, _ := ret[0].(models.UserStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTaskDruftStatus indicates an expected call of GetTaskDruftStatus.
func (mr *MockrepoerMockRecorder) GetTaskDruftStatus(ctx, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTaskDruftStatus", reflect.TypeOf((*Mockrepoer)(nil).GetTaskDruftStatus), ctx, userID)
}

// List mocks base method.
func (m *Mockrepoer) List(ctx context.Context, userID int64) ([]models.Task, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx, userID)
	ret0, _ := ret[0].([]models.Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockrepoerMockRecorder) List(ctx, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*Mockrepoer)(nil).List), ctx, userID)
}

// Remove mocks base method.
func (m *Mockrepoer) Remove(ctx context.Context, id, userID int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Remove", ctx, id, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// Remove indicates an expected call of Remove.
func (mr *MockrepoerMockRecorder) Remove(ctx, id, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Remove", reflect.TypeOf((*Mockrepoer)(nil).Remove), ctx, id, userID)
}

// ReportCompletions mocks base method.
func (m *Mockrepoer) ReportCompletions(ctx context.Context, userID int64) (models.CountCompletion, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReportCompletions", ctx, userID)
	ret0, _ := ret[0].(models.CountCompletion)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReportCompletions indicates an expected call of ReportCompletions.
func (mr *MockrepoerMockRecorder) ReportCompletions(ctx, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReportCompletions", reflect.TypeOf((*Mockrepoer)(nil).ReportCompletions), ctx, userID)
}

// ReportStatuses mocks base method.
func (m *Mockrepoer) ReportStatuses(ctx context.Context, userID int64) (models.CountStatus, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReportStatuses", ctx, userID)
	ret0, _ := ret[0].(models.CountStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReportStatuses indicates an expected call of ReportStatuses.
func (mr *MockrepoerMockRecorder) ReportStatuses(ctx, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReportStatuses", reflect.TypeOf((*Mockrepoer)(nil).ReportStatuses), ctx, userID)
}

// Statuses mocks base method.
func (m *Mockrepoer) Statuses(ctx context.Context, userID, taskID int64) ([]models.TaskStatus, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Statuses", ctx, userID, taskID)
	ret0, _ := ret[0].([]models.TaskStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Statuses indicates an expected call of Statuses.
func (mr *MockrepoerMockRecorder) Statuses(ctx, userID, taskID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Statuses", reflect.TypeOf((*Mockrepoer)(nil).Statuses), ctx, userID, taskID)
}

// Update mocks base method.
func (m *Mockrepoer) Update(ctx context.Context, body models.Task, userID, taskID int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, body, userID, taskID)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockrepoerMockRecorder) Update(ctx, body, userID, taskID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*Mockrepoer)(nil).Update), ctx, body, userID, taskID)
}

// UpdateTaskDruft mocks base method.
func (m *Mockrepoer) UpdateTaskDruft(ctx context.Context, body models.TaskDruft) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTaskDruft", ctx, body)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateTaskDruft indicates an expected call of UpdateTaskDruft.
func (mr *MockrepoerMockRecorder) UpdateTaskDruft(ctx, body any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTaskDruft", reflect.TypeOf((*Mockrepoer)(nil).UpdateTaskDruft), ctx, body)
}
