// Code generated by MockGen. DO NOT EDIT.
// Source: core.go
//
// Generated by this command:
//
//	mockgen -source=core.go -destination=mocks/mocks.go -package mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
	models "github.com/vas-sh/todo/internal/models"
	gomock "go.uber.org/mock/gomock"
)

// MockuserServicer is a mock of userServicer interface.
type MockuserServicer struct {
	ctrl     *gomock.Controller
	recorder *MockuserServicerMockRecorder
	isgomock struct{}
}

// MockuserServicerMockRecorder is the mock recorder for MockuserServicer.
type MockuserServicerMockRecorder struct {
	mock *MockuserServicer
}

// NewMockuserServicer creates a new mock instance.
func NewMockuserServicer(ctrl *gomock.Controller) *MockuserServicer {
	mock := &MockuserServicer{ctrl: ctrl}
	mock.recorder = &MockuserServicerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockuserServicer) EXPECT() *MockuserServicerMockRecorder {
	return m.recorder
}

// AddTelegramID mocks base method.
func (m *MockuserServicer) AddTelegramID(ctx context.Context, userID, chatID int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddTelegramID", ctx, userID, chatID)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddTelegramID indicates an expected call of AddTelegramID.
func (mr *MockuserServicerMockRecorder) AddTelegramID(ctx, userID, chatID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddTelegramID", reflect.TypeOf((*MockuserServicer)(nil).AddTelegramID), ctx, userID, chatID)
}

// FindBotUser mocks base method.
func (m *MockuserServicer) FindBotUser(ctx context.Context, token string) (models.BotUser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindBotUser", ctx, token)
	ret0, _ := ret[0].(models.BotUser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindBotUser indicates an expected call of FindBotUser.
func (mr *MockuserServicerMockRecorder) FindBotUser(ctx, token any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindBotUser", reflect.TypeOf((*MockuserServicer)(nil).FindBotUser), ctx, token)
}

// GetUserID mocks base method.
func (m *MockuserServicer) GetUserID(ctx context.Context, chatID int64) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserID", ctx, chatID)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserID indicates an expected call of GetUserID.
func (mr *MockuserServicerMockRecorder) GetUserID(ctx, chatID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserID", reflect.TypeOf((*MockuserServicer)(nil).GetUserID), ctx, chatID)
}

// MocktaskServecer is a mock of taskServecer interface.
type MocktaskServecer struct {
	ctrl     *gomock.Controller
	recorder *MocktaskServecerMockRecorder
	isgomock struct{}
}

// MocktaskServecerMockRecorder is the mock recorder for MocktaskServecer.
type MocktaskServecerMockRecorder struct {
	mock *MocktaskServecer
}

// NewMocktaskServecer creates a new mock instance.
func NewMocktaskServecer(ctrl *gomock.Controller) *MocktaskServecer {
	mock := &MocktaskServecer{ctrl: ctrl}
	mock.recorder = &MocktaskServecerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MocktaskServecer) EXPECT() *MocktaskServecerMockRecorder {
	return m.recorder
}

// GetTask mocks base method.
func (m *MocktaskServecer) GetTask(ctx context.Context, userID, index int64) (models.Task, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTask", ctx, userID, index)
	ret0, _ := ret[0].(models.Task)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetTask indicates an expected call of GetTask.
func (mr *MocktaskServecerMockRecorder) GetTask(ctx, userID, index any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTask", reflect.TypeOf((*MocktaskServecer)(nil).GetTask), ctx, userID, index)
}

// Mockboter is a mock of boter interface.
type Mockboter struct {
	ctrl     *gomock.Controller
	recorder *MockboterMockRecorder
	isgomock struct{}
}

// MockboterMockRecorder is the mock recorder for Mockboter.
type MockboterMockRecorder struct {
	mock *Mockboter
}

// NewMockboter creates a new mock instance.
func NewMockboter(ctrl *gomock.Controller) *Mockboter {
	mock := &Mockboter{ctrl: ctrl}
	mock.recorder = &MockboterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Mockboter) EXPECT() *MockboterMockRecorder {
	return m.recorder
}

// GetUpdatesChan mocks base method.
func (m *Mockboter) GetUpdatesChan(config tgbotapi.UpdateConfig) tgbotapi.UpdatesChannel {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUpdatesChan", config)
	ret0, _ := ret[0].(tgbotapi.UpdatesChannel)
	return ret0
}

// GetUpdatesChan indicates an expected call of GetUpdatesChan.
func (mr *MockboterMockRecorder) GetUpdatesChan(config any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUpdatesChan", reflect.TypeOf((*Mockboter)(nil).GetUpdatesChan), config)
}

// Request mocks base method.
func (m *Mockboter) Request(c tgbotapi.Chattable) (*tgbotapi.APIResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Request", c)
	ret0, _ := ret[0].(*tgbotapi.APIResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Request indicates an expected call of Request.
func (mr *MockboterMockRecorder) Request(c any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Request", reflect.TypeOf((*Mockboter)(nil).Request), c)
}

// Send mocks base method.
func (m *Mockboter) Send(c tgbotapi.Chattable) (tgbotapi.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", c)
	ret0, _ := ret[0].(tgbotapi.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Send indicates an expected call of Send.
func (mr *MockboterMockRecorder) Send(c any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*Mockboter)(nil).Send), c)
}
